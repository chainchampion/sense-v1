{
  "address": "0x1B8Bb8ce576d9FD9865f47F92dac9A6D21713E1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20[]",
          "name": "_rewards",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofInvalidOrExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "RootUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimable",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nodes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "currRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "prevRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_newRoot",
          "type": "bytes32"
        }
      ],
      "name": "updateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2062f9905ed3e0b6b699a485e2f0cae9952640eb7cfb92568fc047fdf6664dae",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x1B8Bb8ce576d9FD9865f47F92dac9A6D21713E1C",
    "transactionIndex": 37,
    "gasUsed": "672053",
    "logsBloom": "0x
    "blockHash": "0xa2c15df3db5e22acd854c67d2f27c449aadaa1eae0160b15784c5262f957f4cc",
    "transactionHash": "0x2062f9905ed3e0b6b699a485e2f0cae9952640eb7cfb92568fc047fdf6664dae",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 17020035,
        "transactionHash": "0x2062f9905ed3e0b6b699a485e2f0cae9952640eb7cfb92568fc047fdf6664dae",
        "address": "0x1B8Bb8ce576d9FD9865f47F92dac9A6D21713E1C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000059a181710f926eae6fddfbf27a14259e8dd00ca2"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0xa2c15df3db5e22acd854c67d2f27c449aadaa1eae0160b15784c5262f957f4cc"
      }
    ],
    "blockNumber": 17020035,
    "cumulativeGasUsed": "2909827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF",
      "0xba100000625a3754423978a60c9317c58a424e3D"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "31d1c4ad1a16c7c23255475a9a8f2b21",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"_rewards\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofInvalidOrExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimable\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"currRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sense Finance.\",\"events\":{\"RewardsClaimed(address,address,uint256)\":{\"params\":{\"account\":\"The address of the claimer.\",\"amount\":\"The amount of rewards claimed.\",\"reward\":\"The address of the reward token.\"}},\"RewardsWithdrawn(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of reward tokens withdrawn.\",\"reward\":\"The address of the reward token.\",\"to\":\"The address of the recipient.\"}},\"RootUpdated(address,bytes32)\":{\"params\":{\"newRoot\":\"The new merkle's tree root.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(address,address,uint256,bytes32[])\":{\"params\":{\"_account\":\"The address of the claimer.\",\"_claimable\":\"The overall claimable amount of token rewards.\",\"_proof\":\"The merkle proof that validates this claim.\"}},\"constructor\":{\"params\":{\"_rewards\":\"The address of the MORPHO token to distribute.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRoot(address,bytes32)\":{\"params\":{\"_newRoot\":\"The new merkle tree's root.\"}},\"withdrawTokens(address,uint256[])\":{\"params\":{\"_amounts\":\"The amounts for each reward token to transfer.\",\"_to\":\"The address of the recipient.\"}}},\"title\":\"Sense Multi Rewards Distributor.\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed()\":[{\"notice\":\"Thrown when the claimer has already claimed the rewards.\"}],\"ProofInvalidOrExpired()\":[{\"notice\":\"Thrown when the proof is invalid or expired.\"}]},\"events\":{\"RewardsClaimed(address,address,uint256)\":{\"notice\":\"Emitted when an account claims rewards.\"},\"RewardsWithdrawn(address,address,uint256)\":{\"notice\":\"Emitted when reward tokens are withdrawn.\"},\"RootUpdated(address,bytes32)\":{\"notice\":\"Emitted when the root is updated.\"}},\"kind\":\"user\",\"methods\":{\"claim(address,address,uint256,bytes32[])\":{\"notice\":\"Claims rewards.\"},\"constructor\":{\"notice\":\"Constructs Morpho's RewardsDistributor contract.\"},\"updateRoot(address,bytes32)\":{\"notice\":\"Updates the current merkle tree's root.\"},\"withdrawTokens(address,uint256[])\":{\"notice\":\"Withdraws reward tokens to a recipient.\"}},\"notice\":\"This contract allows users to claim their rewards. This contract is largely inspired by Morpho's Reward Distributor contract: https://github.com/morpho-dao/morpho-v1/blob/main/src/common/rewards-distribution/RewardsDistributor.sol. and modified to allow multiple rewards tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol\":\"MultiRewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363830303030353132333235\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { ERC20 } from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Sense Multi Rewards Distributor.\\n/// @author Sense Finance.\\n/// @notice This contract allows users to claim their rewards. This contract is largely inspired by Morpho's Reward Distributor contract: https://github.com/morpho-dao/morpho-v1/blob/main/src/common/rewards-distribution/RewardsDistributor.sol.\\n/// and modified to allow multiple rewards tokens.\\ncontract MultiRewardsDistributor is Ownable {\\n    using SafeTransferLib for ERC20;\\n\\n    /// STORAGE ///\\n\\n    struct Node {\\n        bytes32 currRoot; // The merkle tree's root of the current rewards distribution.\\n        bytes32 prevRoot; // The merkle tree's root of the previous rewards distribution.\\n        mapping(address => uint256) claimed; // The rewards already claimed. account -> amount.\\n    }\\n    mapping(ERC20 => Node) public nodes;\\n\\n    ERC20[] public rewards;\\n\\n    /// EVENTS ///\\n\\n    /// @notice Emitted when the root is updated.\\n    /// @param newRoot The new merkle's tree root.\\n    event RootUpdated(ERC20 reward, bytes32 newRoot);\\n\\n    /// @notice Emitted when reward tokens are withdrawn.\\n    /// @param reward The address of the reward token.\\n    /// @param to The address of the recipient.\\n    /// @param amount The amount of reward tokens withdrawn.\\n    event RewardsWithdrawn(ERC20 reward, address to, uint256 amount);\\n\\n    /// @notice Emitted when an account claims rewards.\\n    /// @param reward The address of the reward token.\\n    /// @param account The address of the claimer.\\n    /// @param amount The amount of rewards claimed.\\n    event RewardsClaimed(ERC20 reward, address account, uint256 amount);\\n\\n    /// ERRORS ///\\n\\n    /// @notice Thrown when the proof is invalid or expired.\\n    error ProofInvalidOrExpired();\\n\\n    /// @notice Thrown when the claimer has already claimed the rewards.\\n    error AlreadyClaimed();\\n\\n    /// CONSTRUCTOR ///\\n\\n    /// @notice Constructs Morpho's RewardsDistributor contract.\\n    /// @param _rewards The address of the MORPHO token to distribute.\\n    constructor(ERC20[] memory _rewards) {\\n        rewards = _rewards;\\n    }\\n\\n    /// EXTERNAL ///\\n\\n    /// @notice Updates the current merkle tree's root.\\n    /// @param _newRoot The new merkle tree's root.\\n    function updateRoot(ERC20 _reward, bytes32 _newRoot) external onlyOwner {\\n        nodes[_reward].prevRoot = nodes[_reward].currRoot;\\n        nodes[_reward].currRoot = _newRoot;\\n        emit RootUpdated(_reward, _newRoot);\\n    }\\n\\n    /// @notice Withdraws reward tokens to a recipient.\\n    /// @param _to The address of the recipient.\\n    /// @param _amounts The amounts for each reward token to transfer.\\n    function withdrawTokens(address _to, uint256[] calldata _amounts) external onlyOwner {\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            ERC20 reward = rewards[i];\\n            uint256 rewardBalance = reward.balanceOf(address(this));\\n            uint256 toWithdraw = rewardBalance < _amounts[i] ? rewardBalance : _amounts[i];\\n            reward.safeTransfer(_to, toWithdraw);\\n            emit RewardsWithdrawn(reward, _to, toWithdraw);\\n        }\\n    }\\n\\n    /// @notice Claims rewards.\\n    /// @param _account The address of the claimer.\\n    /// @param _claimable The overall claimable amount of token rewards.\\n    /// @param _proof The merkle proof that validates this claim.\\n    function claim(\\n        ERC20 _reward,\\n        address _account,\\n        uint256 _claimable,\\n        bytes32[] calldata _proof\\n    ) external {\\n        bytes32 candidateRoot = MerkleProof.processProof(\\n            _proof,\\n            keccak256(abi.encodePacked(_reward, _account, _claimable))\\n        );\\n        if (candidateRoot != nodes[_reward].currRoot && candidateRoot != nodes[_reward].prevRoot)\\n            revert ProofInvalidOrExpired();\\n\\n        uint256 alreadyClaimed = nodes[_reward].claimed[_account];\\n        if (_claimable <= alreadyClaimed) revert AlreadyClaimed();\\n\\n        uint256 amount;\\n        unchecked {\\n            amount = _claimable - alreadyClaimed;\\n        }\\n\\n        nodes[_reward].claimed[_account] = _claimable;\\n\\n        _reward.safeTransfer(_account, amount);\\n        emit RewardsClaimed(_reward, _account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x10839839062d6127d437ad6b97a9c41b55c8c70929ed37341d995a29dbcffcf2\",\"license\":\"GNU AGPLv3\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000ba338038062000ba3833981016040819052620000349162000160565b6200003f336200005c565b805162000054906002906020840190620000ac565b505062000232565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000104579160200282015b828111156200010457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620000cd565b506200011292915062000116565b5090565b5b8082111562000112576000815560010162000117565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200015b57600080fd5b919050565b600060208083850312156200017457600080fd5b82516001600160401b03808211156200018c57600080fd5b818501915085601f830112620001a157600080fd5b815181811115620001b657620001b66200012d565b8060051b604051601f19603f83011681018181108582111715620001de57620001de6200012d565b604052918252848201925083810185019188831115620001fd57600080fd5b938501935b828510156200022657620002168562000143565b8452938501939285019262000202565b98975050505050505050565b61096180620002426000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063189a5a171461007d578063715018a6146100be5780638da5cb5b146100c8578063bc6cc417146100ed578063d731fff014610100578063f2fde38b14610113578063f301af4214610126578063fabed41214610139575b600080fd5b6100a461008b36600461073b565b6001602081905260009182526040909120805491015482565b604080519283526020830191909152015b60405180910390f35b6100c661014c565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b5565b6100c66100fb366004610758565b610160565b6100c661010e3660046107d0565b6101ca565b6100c661012136600461073b565b61031b565b6100d5610134366004610825565b610399565b6100c661014736600461083e565b6103c3565b61015461057f565b61015e60006105d9565b565b61016861057f565b6001600160a01b03821660008181526001602081815260409283902080549281019290925590849055815192835282018390527f0b294da292f26e55fd442b5c0164fbb9013036ff00c5cfdde0efd01c1baaf632910160405180910390a15050565b6101d261057f565b60005b600254811015610315576000600282815481106101f4576101f46108b1565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b91906108c7565b90506000858585818110610281576102816108b1565b9050602002013582106102ac578585858181106102a0576102a06108b1565b905060200201356102ae565b815b90506102c46001600160a01b0384168883610629565b7fd01566b65da2d62cb66f3844588c99d9a95b38394ccdc9c3f7604536e653cf1b8388836040516102f7939291906108e0565b60405180910390a1505050808061030d90610904565b9150506101d5565b50505050565b61032361057f565b6001600160a01b03811661038d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610396816105d9565b50565b600281815481106103a957600080fd5b6000918252602090912001546001600160a01b0316905081565b600061044d838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608c811b821660208401528b901b1660348201526048810189905260680191506104329050565b604051602081830303815290604052805190602001206106a7565b6001600160a01b038716600090815260016020526040902054909150811480159061049457506001600160a01b038616600090815260016020819052604090912001548114155b156104b25760405163f542095760e01b815260040160405180910390fd5b6001600160a01b03808716600090815260016020908152604080832093891683526002909301905220548085116104fc57604051630c8d9eab60e31b815260040160405180910390fd5b6001600160a01b038088166000818152600160209081526040808320948b16835260029094019052919091208690558186039061053a908883610629565b7f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c788888360405161056d939291906108e0565b60405180910390a15050505050505050565b6000546001600160a01b0316331461015e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610384565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103155760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610384565b600081815b84518110156106ec576106d8828683815181106106cb576106cb6108b1565b60200260200101516106f4565b9150806106e481610904565b9150506106ac565b509392505050565b600081831061071057600082815260208490526040902061071f565b60008381526020839052604090205b9392505050565b6001600160a01b038116811461039657600080fd5b60006020828403121561074d57600080fd5b813561071f81610726565b6000806040838503121561076b57600080fd5b823561077681610726565b946020939093013593505050565b60008083601f84011261079657600080fd5b50813567ffffffffffffffff8111156107ae57600080fd5b6020830191508360208260051b85010111156107c957600080fd5b9250929050565b6000806000604084860312156107e557600080fd5b83356107f081610726565b9250602084013567ffffffffffffffff81111561080c57600080fd5b61081886828701610784565b9497909650939450505050565b60006020828403121561083757600080fd5b5035919050565b60008060008060006080868803121561085657600080fd5b853561086181610726565b9450602086013561087181610726565b935060408601359250606086013567ffffffffffffffff81111561089457600080fd5b6108a088828901610784565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156108d957600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001820161092457634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122045c145824346260b676f665c80c39e55f3cc13ab5a7419efb58d0fe1875a3ee864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c8063189a5a171461007d578063715018a6146100be5780638da5cb5b146100c8578063bc6cc417146100ed578063d731fff014610100578063f2fde38b14610113578063f301af4214610126578063fabed41214610139575b600080fd5b6100a461008b36600461073b565b6001602081905260009182526040909120805491015482565b604080519283526020830191909152015b60405180910390f35b6100c661014c565b005b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b5565b6100c66100fb366004610758565b610160565b6100c661010e3660046107d0565b6101ca565b6100c661012136600461073b565b61031b565b6100d5610134366004610825565b610399565b6100c661014736600461083e565b6103c3565b61015461057f565b61015e60006105d9565b565b61016861057f565b6001600160a01b03821660008181526001602081815260409283902080549281019290925590849055815192835282018390527f0b294da292f26e55fd442b5c0164fbb9013036ff00c5cfdde0efd01c1baaf632910160405180910390a15050565b6101d261057f565b60005b600254811015610315576000600282815481106101f4576101f46108b1565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b91906108c7565b90506000858585818110610281576102816108b1565b9050602002013582106102ac578585858181106102a0576102a06108b1565b905060200201356102ae565b815b90506102c46001600160a01b0384168883610629565b7fd01566b65da2d62cb66f3844588c99d9a95b38394ccdc9c3f7604536e653cf1b8388836040516102f7939291906108e0565b60405180910390a1505050808061030d90610904565b9150506101d5565b50505050565b61032361057f565b6001600160a01b03811661038d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610396816105d9565b50565b600281815481106103a957600080fd5b6000918252602090912001546001600160a01b0316905081565b600061044d838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040516bffffffffffffffffffffffff1960608c811b821660208401528b901b1660348201526048810189905260680191506104329050565b604051602081830303815290604052805190602001206106a7565b6001600160a01b038716600090815260016020526040902054909150811480159061049457506001600160a01b038616600090815260016020819052604090912001548114155b156104b25760405163f542095760e01b815260040160405180910390fd5b6001600160a01b03808716600090815260016020908152604080832093891683526002909301905220548085116104fc57604051630c8d9eab60e31b815260040160405180910390fd5b6001600160a01b038088166000818152600160209081526040808320948b16835260029094019052919091208690558186039061053a908883610629565b7f9310ccfcb8de723f578a9e4282ea9f521f05ae40dc08f3068dfad528a65ee3c788888360405161056d939291906108e0565b60405180910390a15050505050505050565b6000546001600160a01b0316331461015e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610384565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060405163a9059cbb60e01b6000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806103155760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610384565b600081815b84518110156106ec576106d8828683815181106106cb576106cb6108b1565b60200260200101516106f4565b9150806106e481610904565b9150506106ac565b509392505050565b600081831061071057600082815260208490526040902061071f565b60008381526020839052604090205b9392505050565b6001600160a01b038116811461039657600080fd5b60006020828403121561074d57600080fd5b813561071f81610726565b6000806040838503121561076b57600080fd5b823561077681610726565b946020939093013593505050565b60008083601f84011261079657600080fd5b50813567ffffffffffffffff8111156107ae57600080fd5b6020830191508360208260051b85010111156107c957600080fd5b9250929050565b6000806000604084860312156107e557600080fd5b83356107f081610726565b9250602084013567ffffffffffffffff81111561080c57600080fd5b61081886828701610784565b9497909650939450505050565b60006020828403121561083757600080fd5b5035919050565b60008060008060006080868803121561085657600080fd5b853561086181610726565b9450602086013561087181610726565b935060408601359250606086013567ffffffffffffffff81111561089457600080fd5b6108a088828901610784565b969995985093965092949392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156108d957600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001820161092457634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122045c145824346260b676f665c80c39e55f3cc13ab5a7419efb58d0fe1875a3ee864736f6c634300080f0033",
  "devdoc": {
    "author": "Sense Finance.",
    "events": {
      "RewardsClaimed(address,address,uint256)": {
        "params": {
          "account": "The address of the claimer.",
          "amount": "The amount of rewards claimed.",
          "reward": "The address of the reward token."
        }
      },
      "RewardsWithdrawn(address,address,uint256)": {
        "params": {
          "amount": "The amount of reward tokens withdrawn.",
          "reward": "The address of the reward token.",
          "to": "The address of the recipient."
        }
      },
      "RootUpdated(address,bytes32)": {
        "params": {
          "newRoot": "The new merkle's tree root."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address,address,uint256,bytes32[])": {
        "params": {
          "_account": "The address of the claimer.",
          "_claimable": "The overall claimable amount of token rewards.",
          "_proof": "The merkle proof that validates this claim."
        }
      },
      "constructor": {
        "params": {
          "_rewards": "The address of the MORPHO token to distribute."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRoot(address,bytes32)": {
        "params": {
          "_newRoot": "The new merkle tree's root."
        }
      },
      "withdrawTokens(address,uint256[])": {
        "params": {
          "_amounts": "The amounts for each reward token to transfer.",
          "_to": "The address of the recipient."
        }
      }
    },
    "title": "Sense Multi Rewards Distributor.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AlreadyClaimed()": [
        {
          "notice": "Thrown when the claimer has already claimed the rewards."
        }
      ],
      "ProofInvalidOrExpired()": [
        {
          "notice": "Thrown when the proof is invalid or expired."
        }
      ]
    },
    "events": {
      "RewardsClaimed(address,address,uint256)": {
        "notice": "Emitted when an account claims rewards."
      },
      "RewardsWithdrawn(address,address,uint256)": {
        "notice": "Emitted when reward tokens are withdrawn."
      },
      "RootUpdated(address,bytes32)": {
        "notice": "Emitted when the root is updated."
      }
    },
    "kind": "user",
    "methods": {
      "claim(address,address,uint256,bytes32[])": {
        "notice": "Claims rewards."
      },
      "constructor": {
        "notice": "Constructs Morpho's RewardsDistributor contract."
      },
      "updateRoot(address,bytes32)": {
        "notice": "Updates the current merkle tree's root."
      },
      "withdrawTokens(address,uint256[])": {
        "notice": "Withdraws reward tokens to a recipient."
      }
    },
    "notice": "This contract allows users to claim their rewards. This contract is largely inspired by Morpho's Reward Distributor contract: https://github.com/morpho-dao/morpho-v1/blob/main/src/common/rewards-distribution/RewardsDistributor.sol. and modified to allow multiple rewards tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19192,
        "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
        "label": "nodes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(ERC20)41573,t_struct(Node)19186_storage)"
      },
      {
        "astId": 19196,
        "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
        "label": "rewards",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_contract(ERC20)41573)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ERC20)41573)dyn_storage": {
        "base": "t_contract(ERC20)41573",
        "encoding": "dynamic_array",
        "label": "contract ERC20[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)41573": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(ERC20)41573,t_struct(Node)19186_storage)": {
        "encoding": "mapping",
        "key": "t_contract(ERC20)41573",
        "label": "mapping(contract ERC20 => struct MultiRewardsDistributor.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)19186_storage"
      },
      "t_struct(Node)19186_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsDistributor.Node",
        "members": [
          {
            "astId": 19179,
            "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
            "label": "currRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 19181,
            "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
            "label": "prevRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 19185,
            "contract": "@sense-finance/v1-core/src/external/MultiRewardsDistributor.sol:MultiRewardsDistributor",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}