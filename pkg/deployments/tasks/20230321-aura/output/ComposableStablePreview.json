{
  "address": "0x4d1ed96dDa2F3344b49aB7C993A6d65EcCAE74B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "minAmountsOut",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "toInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.ExitPoolRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "exitPoolPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountTokenOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "assets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "maxAmountsIn",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "fromInternalBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.JoinPoolRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "joinPoolPreview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountBptOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcede8d5714258d2cf053f484dfc9bb7bdb9ee292982879ad73e4a001190f35b7",
  "receipt": {
    "to": null,
    "from": "0x59A181710F926Eae6FddfbF27a14259E8DD00cA2",
    "contractAddress": "0x4d1ed96dDa2F3344b49aB7C993A6d65EcCAE74B9",
    "transactionIndex": 4,
    "gasUsed": "2157566",
    "logsBloom": "0x
    "blockHash": "0xa5ac8a1b22715cd87166a5f114f40a9d522f9b15cb5a7e41d0fc62d6f942946e",
    "transactionHash": "0xcede8d5714258d2cf053f484dfc9bb7bdb9ee292982879ad73e4a001190f35b7",
    "logs": [],
    "blockNumber": 17023697,
    "cumulativeGasUsed": "2627507",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "539889e47416bb0fe46426a35238c5d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"exitPoolPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokenOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"joinPoolPreview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBptOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"from https://github.com/pendle-finance/pendle-core-v2-public/blob/e0b8164f8837df85dd1f9cf2f5d9752c8fc5f704/contracts/core/StandardizedYield/implementations/BalancerStable/base/ComposableStable/ComposableStablePreview.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sense-finance/v1-core/src/external/ComposableStablePreview.sol\":\"ComposableStablePreview\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363831313939383939393539\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\n/**\\n * @dev forked from https://etherscan.io/token/0x8e85e97ed19c0fa13b2549309965291fbbc0048b#code\\n * with omitted overflow checks given solidity version\\n */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant TWO = 2 * ONE;\\n    uint256 internal constant FOUR = 4 * ONE;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            unchecked {\\n                return ((product - 1) / ONE) + 1;\\n            }\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Zero division\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Zero division\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            unchecked {\\n                return ((aInflated - 1) / b) + 1;\\n            }\\n        }\\n    }\\n\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return (x < ONE) ? (ONE - x) : 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7bc2419c68b48f4237d4e3c134556ffe46f58e5d6fffa2a71692927f8cb083dc\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/StablePoolUserData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nlibrary StablePoolUserData {\\n    enum JoinKind {\\n        INIT,\\n        EXACT_TOKENS_IN_FOR_BPT_OUT,\\n        TOKEN_IN_FOR_EXACT_BPT_OUT\\n    }\\n    enum ExitKind {\\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\\n        BPT_IN_FOR_EXACT_TOKENS_OUT\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountOut)\\n    {\\n        (, amountsIn, minBPTAmountOut) = abi.decode(self, (JoinKind, uint256[], uint256));\\n    }\\n\\n    function exactBptInForTokenOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256 bptAmountIn, uint256 tokenIndex)\\n    {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (ExitKind, uint256, uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x0293a084a2296acce1f186a5d54680b6cd3b03bbdca30a49a4183412ff346fd6\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/StablePreviewBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n// import { ERC20 } from \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"../../../../../interfaces/Balancer/IVault.sol\\\";\\nimport \\\"../../../../../interfaces/Balancer/IBalancerFees.sol\\\";\\nimport \\\"../../../../../interfaces/Balancer/IBalancerStablePreview.sol\\\";\\n\\nabstract contract StablePreviewBase is IBalancerStablePreview {\\n    address internal constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant FEE_COLLECTOR = 0xce88686553686DA562CE7Cea497CE749DA109f9F;\\n\\n    enum PoolBalanceChangeKind {\\n        JOIN,\\n        EXIT\\n    }\\n\\n    struct PoolBalanceChange {\\n        IAsset[] assets;\\n        uint256[] limits;\\n        bytes userData;\\n        bool useInternalBalance;\\n    }\\n\\n    function joinPoolPreview(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IVault.JoinPoolRequest memory request,\\n        bytes memory data\\n    ) external view returns (uint256 amountBptOut) {\\n        amountBptOut = _joinOrExit(\\n            PoolBalanceChangeKind.JOIN,\\n            poolId,\\n            sender,\\n            payable(recipient),\\n            _toPoolBalanceChange(request),\\n            data\\n        );\\n    }\\n\\n    function exitPoolPreview(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IVault.ExitPoolRequest memory request,\\n        bytes memory data\\n    ) external view returns (uint256 amountTokenOut) {\\n        amountTokenOut = _joinOrExit(\\n            PoolBalanceChangeKind.EXIT,\\n            poolId,\\n            sender,\\n            recipient,\\n            _toPoolBalanceChange(request),\\n            data\\n        );\\n    }\\n\\n    function _joinOrExit(\\n        PoolBalanceChangeKind kind,\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        PoolBalanceChange memory change,\\n        bytes memory data\\n    ) private view returns (uint256 amountBptOrTokensOut) {\\n        ERC20[] memory tokens = _translateToERC20(change.assets);\\n        (uint256[] memory balances, uint256 lastChangeBlock) = _validateTokensAndGetBalances(\\n            poolId,\\n            tokens\\n        );\\n\\n        amountBptOrTokensOut = _callPoolBalanceChange(\\n            kind,\\n            poolId,\\n            sender,\\n            recipient,\\n            change,\\n            balances,\\n            lastChangeBlock,\\n            data\\n        );\\n    }\\n\\n    function _callPoolBalanceChange(\\n        PoolBalanceChangeKind kind,\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        PoolBalanceChange memory change,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        bytes memory data\\n    ) private view returns (uint256 amountsChanged) {\\n        if (kind == PoolBalanceChangeKind.JOIN) {\\n            amountsChanged = onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                _getProtocolSwapFeePercentage(),\\n                change.userData,\\n                data\\n            );\\n        } else {\\n            amountsChanged = onExitPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                balances,\\n                lastChangeBlock,\\n                _getProtocolSwapFeePercentage(),\\n                change.userData,\\n                data\\n            );\\n        }\\n    }\\n\\n    function _getProtocolSwapFeePercentage() private view returns (uint256) {\\n        return IBalancerFees(FEE_COLLECTOR).getSwapFeePercentage();\\n    }\\n\\n    function _validateTokensAndGetBalances(\\n        bytes32 poolId,\\n        ERC20[] memory //expectedTokens\\n    ) private view returns (uint256[] memory, uint256) {\\n        (, uint256[] memory balances, uint256 lastChangeBlock) = IVault(BALANCER_VAULT)\\n            .getPoolTokens(poolId);\\n        return (balances, lastChangeBlock);\\n    }\\n\\n    function _translateToERC20(IAsset[] memory assets) internal pure returns (ERC20[] memory) {\\n        ERC20[] memory tokens = new ERC20[](assets.length);\\n        for (uint256 i = 0; i < assets.length; ++i) {\\n            tokens[i] = _translateToERC20(assets[i]);\\n        }\\n        return tokens;\\n    }\\n\\n    function _translateToERC20(IAsset asset) internal pure returns (ERC20) {\\n        return address(asset) == address(0) ? ERC20(WETH) : ERC20(address(asset));\\n    }\\n\\n    function _toPoolBalanceChange(IVault.JoinPoolRequest memory request)\\n        private\\n        pure\\n        returns (PoolBalanceChange memory change)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            change := request\\n        }\\n    }\\n\\n    function _toPoolBalanceChange(IVault.ExitPoolRequest memory request)\\n        private\\n        pure\\n        returns (PoolBalanceChange memory change)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            change := request\\n        }\\n    }\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        bytes memory data\\n    ) internal view virtual returns (uint256 bptAmountOut);\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        bytes memory data\\n    ) internal view virtual returns (uint256 amountTokenOut);\\n}\\n\",\"keccak256\":\"0xfb3060c45adaba2dc11d1b20c75fb9f7be09ecef45e21551bd62a836ff31a0df\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IAsset {}\\n\",\"keccak256\":\"0x4c94b9f915172041e8f41fa29b9a88c41f686a45272e5f2a2c098dd8a0b8cd0e\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IBalancerFees.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IBalancerFees {\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7ba7d77daeab31a1e8fe91058e8c5e1391b51450105e6ee6a556aa44a91c8a6b\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IBalancerStablePreview.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IBalancerStablePreview {\\n    function joinPoolPreview(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IVault.JoinPoolRequest memory request,\\n        bytes memory data\\n    ) external view returns (uint256 amountBptOut);\\n\\n    function exitPoolPreview(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IVault.ExitPoolRequest memory request,\\n        bytes memory data\\n    ) external view returns (uint256 amountTokenOut);\\n}\\n\",\"keccak256\":\"0x08c8d079618a464bfe4ef4b5dd62361b42be249f1bc97901384077ee811b2960\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBasePool is IERC20 {\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x69e6bff987c06d1e6e5968e6ef3844e47c438e6a79ffc897c562db4a237d9d40\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IComposableStable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"./IBasePool.sol\\\";\\nimport \\\"./IRateProvider.sol\\\";\\n\\ninterface IComposableStable is IBasePool {\\n    function getLastJoinExitData()\\n        external\\n        view\\n        returns (uint256 lastJoinExitAmplification, uint256 lastPostJoinExitInvariant);\\n\\n    function getAmplificationParameter()\\n        external\\n        view\\n        returns (\\n            uint256 value,\\n            bool isUpdating,\\n            uint256 precision\\n        );\\n\\n    function getProtocolFeePercentageCache(uint256 feeType) external view returns (uint256);\\n\\n    function isTokenExemptFromYieldProtocolFee(IERC20 token) external view returns (bool);\\n\\n    function getTokenRateCache(IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 rate,\\n            uint256 oldRate,\\n            uint256 duration,\\n            uint256 expires\\n        );\\n\\n    function getRateProviders() external view returns (IRateProvider[] memory);\\n\\n    function getBptIndex() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe17761b0d56dad96ff4e4cc8aa02f66f520870887ee0f54b682c512df9525cb9\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IRateProvider {\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xce232fbcbacfe267ab358e73010b6fcc092541eef096f46f02cd1d216d3e79b3\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n// import { ERC20 } from \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\ninterface IVault {\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct ExitPoolRequest {\\n        address[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            ERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    function WETH() external view returns (ERC20);\\n\\n    function getPool(bytes32 poolId) external view returns (address, uint8);\\n\\n    function getProtocolFeesCollector() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4eb5417b83423f26abfa7493df9420e5375c4d9b0064c26044dc2fc64da92b81\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/src/external/ComposableStableMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/FixedPoint.sol\\\";\\n\\n/// @notice from https://github.com/pendle-finance/pendle-core-v2-public/blob/e0b8164f8837df85dd1f9cf2f5d9752c8fc5f704/contracts/core/StandardizedYield/implementations/BalancerStable/base/ComposableStable/ComposableStableMath.sol\\n// almost copy-paste from https://etherscan.io/token/0x1e19cf2d73a72ef1332c882f20534b6519be0276#code\\nlibrary ComposableStableMath {\\n    using FixedPoint for uint256;\\n\\n    uint256 internal constant _MIN_AMP = 1;\\n    uint256 internal constant _MAX_AMP = 5000;\\n    uint256 internal constant _AMP_PRECISION = 1e3;\\n\\n    function _calculateInvariant(uint256 amplificationParameter, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        unchecked {\\n            /**********************************************************************************************\\n        // invariant                                                                                 //\\n        // D = invariant                                                  D^(n+1)                    //\\n        // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\\n        // S = sum of balances                                             n^n P                     //\\n        // P = product of balances                                                                   //\\n        // n = number of tokens                                                                      //\\n        **********************************************************************************************/\\n\\n            // Always round down, to match Vyper's arithmetic (which always truncates).\\n\\n            uint256 sum = 0; // S in the Curve version\\n            uint256 numTokens = balances.length;\\n            for (uint256 i = 0; i < numTokens; i++) {\\n                sum = sum.add(balances[i]);\\n            }\\n            if (sum == 0) {\\n                return 0;\\n            }\\n\\n            uint256 prevInvariant; // Dprev in the Curve version\\n            uint256 invariant = sum; // D in the Curve version\\n            uint256 ampTimesTotal = amplificationParameter * numTokens; // Ann in the Curve version\\n\\n            for (uint256 i = 0; i < 255; i++) {\\n                uint256 D_P = invariant;\\n\\n                for (uint256 j = 0; j < numTokens; j++) {\\n                    // (D_P * invariant) / (balances[j] * numTokens)\\n                    D_P = divDown(mul(D_P, invariant), mul(balances[j], numTokens));\\n                }\\n\\n                prevInvariant = invariant;\\n\\n                invariant = divDown(\\n                    mul(\\n                        // (ampTimesTotal * sum) / AMP_PRECISION + D_P * numTokens\\n                        (divDown(mul(ampTimesTotal, sum), _AMP_PRECISION).add(mul(D_P, numTokens))),\\n                        invariant\\n                    ),\\n                    // ((ampTimesTotal - _AMP_PRECISION) * invariant) / _AMP_PRECISION + (numTokens + 1) * D_P\\n                    (\\n                        divDown(mul((ampTimesTotal - _AMP_PRECISION), invariant), _AMP_PRECISION).add(\\n                            mul((numTokens + 1), D_P)\\n                        )\\n                    )\\n                );\\n\\n                if (invariant > prevInvariant) {\\n                    if (invariant - prevInvariant <= 1) {\\n                        return invariant;\\n                    }\\n                } else if (prevInvariant - invariant <= 1) {\\n                    return invariant;\\n                }\\n            }\\n\\n            revert(\\\"Stable Invariant did not converge\\\");\\n        }\\n    }\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            // BPT out, so we round down overall.\\n\\n            // First loop calculates the sum of all token balances, which will be used to calculate\\n            // the current weights of each token, relative to this sum\\n            uint256 sumBalances = 0;\\n            for (uint256 i = 0; i < balances.length; i++) {\\n                sumBalances = sumBalances.add(balances[i]);\\n            }\\n\\n            // Calculate the weighted balance ratio without considering fees\\n            uint256[] memory balanceRatiosWithFee = new uint256[](amountsIn.length);\\n            // The weighted sum of token balance ratios with fee\\n            uint256 invariantRatioWithFees = 0;\\n            for (uint256 i = 0; i < balances.length; i++) {\\n                uint256 currentWeight = balances[i].divDown(sumBalances);\\n                balanceRatiosWithFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\n                invariantRatioWithFees = invariantRatioWithFees.add(balanceRatiosWithFee[i].mulDown(currentWeight));\\n            }\\n\\n            // Second loop calculates new amounts in, taking into account the fee on the percentage excess\\n            uint256[] memory newBalances = new uint256[](balances.length);\\n            for (uint256 i = 0; i < balances.length; i++) {\\n                uint256 amountInWithoutFee;\\n\\n                // Check if the balance ratio is greater than the ideal ratio to charge fees or not\\n                if (balanceRatiosWithFee[i] > invariantRatioWithFees) {\\n                    uint256 nonTaxableAmount = balances[i].mulDown(invariantRatioWithFees.sub(FixedPoint.ONE));\\n                    uint256 taxableAmount = amountsIn[i].sub(nonTaxableAmount);\\n                    // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n                    amountInWithoutFee = nonTaxableAmount.add(\\n                        taxableAmount.mulDown(FixedPoint.ONE - swapFeePercentage)\\n                    );\\n                } else {\\n                    amountInWithoutFee = amountsIn[i];\\n                }\\n\\n                newBalances[i] = balances[i].add(amountInWithoutFee);\\n            }\\n\\n            uint256 newInvariant = _calculateInvariant(amp, newBalances);\\n            uint256 invariantRatio = newInvariant.divDown(currentInvariant);\\n\\n            // If the invariant didn't increase for any reason, we simply don't mint BPT\\n            if (invariantRatio > FixedPoint.ONE) {\\n                return bptTotalSupply.mulDown(invariantRatio - FixedPoint.ONE);\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 currentInvariant,\\n        uint256 swapFeePercentage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            // Token out, so we round down overall.\\n\\n            uint256 newInvariant = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply).mulUp(currentInvariant);\\n\\n            // Calculate amount out without fee\\n            uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n                amp,\\n                balances,\\n                newInvariant,\\n                tokenIndex\\n            );\\n            uint256 amountOutWithoutFee = balances[tokenIndex].sub(newBalanceTokenIndex);\\n\\n            // First calculate the sum of all token balances, which will be used to calculate\\n            // the current weight of each token\\n            uint256 sumBalances = 0;\\n            for (uint256 i = 0; i < balances.length; i++) {\\n                sumBalances = sumBalances.add(balances[i]);\\n            }\\n\\n            // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\\n            // in swap fees.\\n            uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\n            uint256 taxablePercentage = currentWeight.complement();\\n\\n            // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\\n            // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\\n            uint256 taxableAmount = amountOutWithoutFee.mulUp(taxablePercentage);\\n            uint256 nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\\n\\n            // No need to use checked arithmetic for the swap fee, it is guaranteed to be lower than 50%\\n            return nonTaxableAmount.add(taxableAmount.mulDown(FixedPoint.ONE - swapFeePercentage));\\n        }\\n    }\\n\\n    // This function calculates the balance of a given token (tokenIndex)\\n    // given all the other balances and the invariant\\n    function _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 invariant,\\n        uint256 tokenIndex\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            // Rounds result up overall\\n\\n            uint256 ampTimesTotal = amplificationParameter * balances.length;\\n            uint256 sum = balances[0];\\n            uint256 P_D = balances[0] * balances.length;\\n            for (uint256 j = 1; j < balances.length; j++) {\\n                P_D = divDown(mul(mul(P_D, balances[j]), balances.length), invariant);\\n                sum = sum.add(balances[j]);\\n            }\\n            // No need to use safe math, based on the loop above `sum` is greater than or equal to `balances[tokenIndex]`\\n            sum = sum - balances[tokenIndex];\\n\\n            uint256 inv2 = mul(invariant, invariant);\\n            // We remove the balance from c by multiplying it\\n            uint256 c = mul(mul(divUp(inv2, mul(ampTimesTotal, P_D)), _AMP_PRECISION), balances[tokenIndex]);\\n            uint256 b = sum.add(mul(divDown(invariant, ampTimesTotal), _AMP_PRECISION));\\n\\n            // We iterate to find the balance\\n            uint256 prevTokenBalance = 0;\\n            // We multiply the first iteration outside the loop with the invariant to set the value of the\\n            // initial approximation.\\n            uint256 tokenBalance = divUp(inv2.add(c), invariant.add(b));\\n\\n            for (uint256 i = 0; i < 255; i++) {\\n                prevTokenBalance = tokenBalance;\\n\\n                tokenBalance = divUp(\\n                    mul(tokenBalance, tokenBalance).add(c),\\n                    mul(tokenBalance, 2).add(b).sub(invariant)\\n                );\\n\\n                if (tokenBalance > prevTokenBalance) {\\n                    if (tokenBalance - prevTokenBalance <= 1) {\\n                        return tokenBalance;\\n                    }\\n                } else if (prevTokenBalance - tokenBalance <= 1) {\\n                    return tokenBalance;\\n                }\\n            }\\n\\n            revert(\\\"Stable get balance did not converge\\\");\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    LEGACY MATH FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 c = a * b;\\n            require(a == 0 || c / a == b);\\n            return c;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) private pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) private pure returns (uint256) {\\n        unchecked {\\n            require(b != 0);\\n            return a / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) private pure returns (uint256) {\\n        unchecked {\\n            require(b != 0);\\n\\n            if (a == 0) {\\n                return 0;\\n            } else {\\n                return 1 + (a - 1) / b;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x903354f3999433cb061dc0ffb31b57d5b2406b4eb84540d2b2a3ab5c191137f7\",\"license\":\"GPL-3.0-or-later\"},\"@sense-finance/v1-core/src/external/ComposableStablePreview.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/interfaces/Balancer/IComposableStable.sol\\\";\\nimport \\\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/FixedPoint.sol\\\";\\nimport \\\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/StablePoolUserData.sol\\\";\\nimport \\\"@sense-finance/v1-core/lib/pendle-core-v2-public/contracts/core/StandardizedYield/implementations/BalancerStable/base/StablePreviewBase.sol\\\";\\nimport \\\"./ComposableStableMath.sol\\\";\\n\\n/// @notice from https://github.com/pendle-finance/pendle-core-v2-public/blob/e0b8164f8837df85dd1f9cf2f5d9752c8fc5f704/contracts/core/StandardizedYield/implementations/BalancerStable/base/ComposableStable/ComposableStablePreview.sol\\ncontract ComposableStablePreview is StablePreviewBase {\\n    using ComposableStableMath for uint256;\\n    using StablePoolUserData for bytes;\\n    using FixedPoint for uint256;\\n\\n    struct ImmutableData {\\n        address[] poolTokens;\\n        address[] rateProviders;\\n        uint256[] rawScalingFactors;\\n        bool[] isExemptFromYieldProtocolFee;\\n        address LP;\\n        bool noTokensExempt;\\n        bool allTokensExempt;\\n        uint256 bptIndex;\\n        uint256 totalTokens;\\n    }\\n\\n    struct TokenRateCache {\\n        uint256 currentRate;\\n        uint256 oldRate;\\n    }\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        bytes memory poolImmutableData\\n    ) internal view override returns (uint256 bptAmountOut) {\\n        ImmutableData memory imd = abi.decode(poolImmutableData, (ImmutableData));\\n\\n        TokenRateCache[] memory caches = _beforeSwapJoinExit(imd);\\n\\n        uint256[] memory scalingFactors = _scalingFactors(imd, caches);\\n\\n        // skip totalSupply == 0 case\\n\\n        _upscaleArray(balances, scalingFactors);\\n\\n        (bptAmountOut, ) = _onJoinPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage,\\n            scalingFactors,\\n            userData,\\n            imd,\\n            caches\\n        );\\n\\n        // skip _mintPoolTokens, _downscaleUpArray\\n\\n        // we return bptAmountOut instead of minting\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory balances,\\n        uint256 lastChangeBlock,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        bytes memory poolImmutableData\\n    ) internal view override returns (uint256 amountTokenOut) {\\n        ImmutableData memory imd = abi.decode(poolImmutableData, (ImmutableData));\\n\\n        uint256 bptAmountIn;\\n        uint256[] memory amountsOut;\\n\\n        // skip recovery mode\\n\\n        TokenRateCache[] memory caches = _beforeSwapJoinExit(imd);\\n\\n        uint256[] memory scalingFactors = _scalingFactors(imd, caches);\\n        _upscaleArray(balances, scalingFactors);\\n\\n        (bptAmountIn, amountsOut) = _onExitPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            balances,\\n            lastChangeBlock,\\n            protocolSwapFeePercentage, // assume no recovery mode\\n            scalingFactors,\\n            userData,\\n            imd,\\n            caches\\n        );\\n\\n        _downscaleDownArray(amountsOut, scalingFactors);\\n\\n        // skip burnPoolTokens\\n\\n        for (uint256 i = 0; i < amountsOut.length; i++) {\\n            if (amountsOut[i] > 0) return amountsOut[i];\\n        }\\n    }\\n\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory registeredBalances,\\n        uint256,\\n        uint256,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    ) internal view returns (uint256, uint256[] memory) {\\n        return _onJoinExitPool(true, registeredBalances, scalingFactors, userData, imd, caches);\\n    }\\n\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory registeredBalances,\\n        uint256,\\n        uint256,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    ) internal view returns (uint256, uint256[] memory) {\\n        return _onJoinExitPool(false, registeredBalances, scalingFactors, userData, imd, caches);\\n    }\\n\\n    /**\\n     * @return bptAmount\\n     * @return amountsDelta this will not contain bpt item since it will be discarded on the upper level\\n     */\\n    function _onJoinExitPool(\\n        bool isJoin,\\n        uint256[] memory registeredBalances,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    ) internal view returns (uint256 bptAmount, uint256[] memory amountsDelta) {\\n        (\\n            uint256 preJoinExitSupply,\\n            uint256[] memory balances,\\n            uint256 currentAmp,\\n            uint256 preJoinExitInvariant\\n        ) = _beforeJoinExit(registeredBalances, imd, caches);\\n\\n        function(uint256[] memory, uint256, uint256, uint256, uint256[] memory, bytes memory, ImmutableData memory)\\n            internal\\n            view\\n            returns (uint256, uint256[] memory) _doJoinOrExit = (isJoin ? _doJoin : _doExit);\\n\\n        (bptAmount, amountsDelta) = _doJoinOrExit(\\n            balances,\\n            currentAmp,\\n            preJoinExitSupply,\\n            preJoinExitInvariant,\\n            scalingFactors,\\n            userData,\\n            imd\\n        );\\n        amountsDelta = _addBptItem(amountsDelta, 0, imd);\\n\\n        // _mutateAmounts\\n\\n        // skip _updateInvariantAfterJoinExit here\\n    }\\n\\n    function _addBptItem(\\n        uint256[] memory amounts,\\n        uint256 bptAmount,\\n        ImmutableData memory imd\\n    ) internal pure returns (uint256[] memory registeredTokenAmounts) {\\n        registeredTokenAmounts = new uint256[](amounts.length + 1);\\n        for (uint256 i = 0; i < registeredTokenAmounts.length; i++) {\\n            registeredTokenAmounts[i] = i == imd.bptIndex ? bptAmount : amounts[i < imd.bptIndex ? i : i - 1];\\n        }\\n    }\\n\\n    function _doJoin(\\n        uint256[] memory balances,\\n        uint256 currentAmp,\\n        uint256 preJoinExitSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData,\\n        ImmutableData memory imd\\n    ) internal view returns (uint256, uint256[] memory) {\\n        // this is always true given Pendle SY context\\n        return\\n            _joinExactTokensInForBPTOut(\\n                preJoinExitSupply,\\n                preJoinExitInvariant,\\n                currentAmp,\\n                balances,\\n                scalingFactors,\\n                userData,\\n                imd\\n            );\\n    }\\n\\n    function _joinExactTokensInForBPTOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        uint256[] memory scalingFactors,\\n        bytes memory userData,\\n        ImmutableData memory imd\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, ) = userData.exactTokensInForBptOut();\\n\\n        // The user-provided amountsIn is unscaled, so we address that.\\n        _upscaleArray(amountsIn, _dropBptItem(imd, scalingFactors));\\n\\n        uint256 bptAmountOut = currentAmp._calcBptOutGivenExactTokensIn(\\n            balances,\\n            amountsIn,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            IBasePool(imd.LP).getSwapFeePercentage()\\n        );\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _doExit(\\n        uint256[] memory balances,\\n        uint256 currentAmp,\\n        uint256 preJoinExitSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256[] memory, /*scalingFactors*/\\n        bytes memory userData,\\n        ImmutableData memory imd\\n    ) internal view returns (uint256, uint256[] memory) {\\n        // this is always true given Pendle SY context\\n        return _exitExactBPTInForTokenOut(preJoinExitSupply, preJoinExitInvariant, currentAmp, balances, userData, imd);\\n    }\\n\\n    function _exitExactBPTInForTokenOut(\\n        uint256 actualSupply,\\n        uint256 preJoinExitInvariant,\\n        uint256 currentAmp,\\n        uint256[] memory balances,\\n        bytes memory userData,\\n        ImmutableData memory imd\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n\\n        amountsOut[tokenIndex] = currentAmp._calcTokenOutGivenExactBptIn(\\n            balances,\\n            tokenIndex,\\n            bptAmountIn,\\n            actualSupply,\\n            preJoinExitInvariant,\\n            IBasePool(imd.LP).getSwapFeePercentage()\\n        );\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _beforeJoinExit(\\n        uint256[] memory registeredBalances,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint256 lastJoinExitAmp, uint256 lastPostJoinExitInvariant) = IComposableStable(imd.LP).getLastJoinExitData();\\n\\n        (\\n            uint256 preJoinExitSupply,\\n            uint256[] memory balances,\\n            uint256 oldAmpPreJoinExitInvariant\\n        ) = _payProtocolFeesBeforeJoinExit(registeredBalances, lastJoinExitAmp, lastPostJoinExitInvariant, imd, caches);\\n\\n        (uint256 currentAmp, , ) = IComposableStable(imd.LP).getAmplificationParameter();\\n        uint256 preJoinExitInvariant = currentAmp == lastJoinExitAmp\\n            ? oldAmpPreJoinExitInvariant\\n            : currentAmp._calculateInvariant(balances);\\n        return (preJoinExitSupply, balances, currentAmp, preJoinExitInvariant);\\n    }\\n\\n    function _payProtocolFeesBeforeJoinExit(\\n        uint256[] memory registeredBalances,\\n        uint256 lastJoinExitAmp,\\n        uint256 lastPostJoinExitInvariant,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        (uint256 virtualSupply, uint256[] memory balances) = _dropBptItemFromBalances(imd, registeredBalances);\\n\\n        (\\n            uint256 expectedProtocolOwnershipPercentage,\\n            uint256 currentInvariantWithLastJoinExitAmp\\n        ) = _getProtocolPoolOwnershipPercentage(balances, lastJoinExitAmp, lastPostJoinExitInvariant, imd, caches);\\n\\n        uint256 protocolFeeAmount = _calculateAdjustedProtocolFeeAmount(\\n            virtualSupply,\\n            expectedProtocolOwnershipPercentage\\n        );\\n\\n        // skip _payProtocolFee, which will make the LP balance from this point onwards to be off\\n\\n        return (virtualSupply + protocolFeeAmount, balances, currentInvariantWithLastJoinExitAmp);\\n    }\\n\\n    function _getProtocolPoolOwnershipPercentage(\\n        uint256[] memory balances,\\n        uint256 lastJoinExitAmp,\\n        uint256 lastPostJoinExitInvariant,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    ) internal view returns (uint256, uint256) {\\n        (\\n            uint256 swapFeeGrowthInvariant,\\n            uint256 totalNonExemptGrowthInvariant,\\n            uint256 totalGrowthInvariant\\n        ) = _getGrowthInvariants(balances, lastJoinExitAmp, imd, caches);\\n\\n        uint256 swapFeeGrowthInvariantDelta = (swapFeeGrowthInvariant > lastPostJoinExitInvariant)\\n            ? swapFeeGrowthInvariant - lastPostJoinExitInvariant\\n            : 0;\\n        uint256 nonExemptYieldGrowthInvariantDelta = (totalNonExemptGrowthInvariant > swapFeeGrowthInvariant)\\n            ? totalNonExemptGrowthInvariant - swapFeeGrowthInvariant\\n            : 0;\\n\\n        uint256 protocolSwapFeePercentage = swapFeeGrowthInvariantDelta.divDown(totalGrowthInvariant).mulDown(\\n            IComposableStable(imd.LP).getProtocolFeePercentageCache(0) // ProtocolFeeType.SWAP // can't get better\\n        );\\n\\n        uint256 protocolYieldPercentage = nonExemptYieldGrowthInvariantDelta.divDown(totalGrowthInvariant).mulDown(\\n            IComposableStable(imd.LP).getProtocolFeePercentageCache(2) // ProtocolFeeType.YIELD // can't get better\\n        );\\n\\n        // These percentages can then be simply added to compute the total protocol Pool ownership percentage.\\n        // This is naturally bounded above by FixedPoint.ONE so this addition cannot overflow.\\n        return (protocolSwapFeePercentage + protocolYieldPercentage, totalGrowthInvariant);\\n    }\\n\\n    function _getGrowthInvariants(\\n        uint256[] memory balances,\\n        uint256 lastJoinExitAmp,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory caches\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 swapFeeGrowthInvariant,\\n            uint256 totalNonExemptGrowthInvariant,\\n            uint256 totalGrowthInvariant\\n        )\\n    {\\n        swapFeeGrowthInvariant = lastJoinExitAmp._calculateInvariant(_getAdjustedBalances(balances, true, imd, caches));\\n\\n        if (imd.noTokensExempt) {\\n            totalNonExemptGrowthInvariant = lastJoinExitAmp._calculateInvariant(balances);\\n            totalGrowthInvariant = totalNonExemptGrowthInvariant;\\n        } else if (imd.allTokensExempt) {\\n            totalNonExemptGrowthInvariant = swapFeeGrowthInvariant;\\n            totalGrowthInvariant = lastJoinExitAmp._calculateInvariant(balances);\\n        } else {\\n            totalNonExemptGrowthInvariant = lastJoinExitAmp._calculateInvariant(\\n                _getAdjustedBalances(balances, false, imd, caches)\\n            );\\n\\n            totalGrowthInvariant = lastJoinExitAmp._calculateInvariant(balances);\\n        }\\n    }\\n\\n    function _getAdjustedBalances(\\n        uint256[] memory balances,\\n        bool ignoreExemptFlags,\\n        ImmutableData memory imd,\\n        TokenRateCache[] memory tokenRateCaches\\n    ) internal pure returns (uint256[] memory) {\\n        uint256 totalTokensWithoutBpt = balances.length;\\n        uint256[] memory adjustedBalances = new uint256[](totalTokensWithoutBpt);\\n\\n        for (uint256 i = 0; i < totalTokensWithoutBpt; ++i) {\\n            uint256 skipBptIndex = i >= imd.bptIndex ? i + 1 : i;\\n            adjustedBalances[i] = _isTokenExemptFromYieldProtocolFee(imd, skipBptIndex) ||\\n                (ignoreExemptFlags && _hasRateProvider(imd, skipBptIndex))\\n                ? _adjustedBalance(balances[i], tokenRateCaches[skipBptIndex])\\n                : balances[i];\\n        }\\n\\n        return adjustedBalances;\\n    }\\n\\n    function _adjustedBalance(uint256 balance, TokenRateCache memory cache) private pure returns (uint256) {\\n        return (balance * cache.oldRate) / cache.currentRate;\\n    }\\n\\n    function _calculateAdjustedProtocolFeeAmount(uint256 supply, uint256 basePercentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return supply.mulDown(basePercentage).divDown(basePercentage.complement());\\n    }\\n\\n    function _dropBptItemFromBalances(ImmutableData memory imd, uint256[] memory registeredBalances)\\n        internal\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        return (_getVirtualSupply(imd, registeredBalances[imd.bptIndex]), _dropBptItem(imd, registeredBalances));\\n    }\\n\\n    function _dropBptItem(ImmutableData memory imd, uint256[] memory amounts) internal pure returns (uint256[] memory) {\\n        uint256[] memory amountsWithoutBpt = new uint256[](amounts.length - 1);\\n        for (uint256 i = 0; i < amountsWithoutBpt.length; i++) {\\n            amountsWithoutBpt[i] = amounts[i < imd.bptIndex ? i : i + 1];\\n        }\\n        return amountsWithoutBpt;\\n    }\\n\\n    function _getVirtualSupply(ImmutableData memory imd, uint256 bptBalance) internal view returns (uint256) {\\n        return (IERC20(imd.LP).totalSupply()).sub(bptBalance);\\n    }\\n\\n    function _beforeSwapJoinExit(ImmutableData memory imd)\\n        internal\\n        view\\n        returns (TokenRateCache[] memory tokenRateCaches)\\n    {\\n        return _cacheTokenRatesIfNecessary(imd);\\n    }\\n\\n    function _cacheTokenRatesIfNecessary(ImmutableData memory imd)\\n        internal\\n        view\\n        returns (TokenRateCache[] memory tokenRateCaches)\\n    {\\n        tokenRateCaches = new TokenRateCache[](imd.totalTokens);\\n\\n        for (uint256 i = 0; i < imd.totalTokens; ++i) {\\n            tokenRateCaches[i] = _cacheTokenRateIfNecessary(i, imd);\\n        }\\n    }\\n\\n    /**\\n     * @dev Caches the rate for a token if necessary. It ignores the call if there is no provider set.\\n     */\\n    function _cacheTokenRateIfNecessary(uint256 index, ImmutableData memory imd)\\n        internal\\n        view\\n        returns (TokenRateCache memory res)\\n    {\\n        if (index == imd.bptIndex || !_hasRateProvider(imd, index)) return res;\\n\\n        uint256 expires;\\n        (res.currentRate, res.oldRate, , expires) = IComposableStable(imd.LP).getTokenRateCache(\\n            IERC20(imd.poolTokens[index])\\n        );\\n\\n        if (block.timestamp > expires) {\\n            res.currentRate = IRateProvider(imd.rateProviders[index]).getRate();\\n        }\\n    }\\n\\n    function _scalingFactors(ImmutableData memory imd, TokenRateCache[] memory caches)\\n        internal\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        // There is no need to check the arrays length since both are based on `_getTotalTokens`\\n        uint256[] memory scalingFactors = new uint256[](imd.totalTokens);\\n\\n        for (uint256 i = 0; i < imd.totalTokens; ++i) {\\n            scalingFactors[i] = imd.rawScalingFactors[i].mulDown(_getTokenRate(caches, i));\\n        }\\n\\n        return scalingFactors;\\n    }\\n\\n    function _getTokenRate(TokenRateCache[] memory caches, uint256 index) internal view virtual returns (uint256) {\\n        return caches[index].currentRate == 0 ? FixedPoint.ONE : caches[index].currentRate;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               Helpers functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _upscaleArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal pure {\\n        uint256 length = amounts.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            amounts[i] = FixedPoint.mulDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _downscaleDownArray(uint256[] memory amounts, uint256[] memory scalingFactors) internal pure {\\n        uint256 length = amounts.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            amounts[i] = FixedPoint.divDown(amounts[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _hasRateProvider(ImmutableData memory imd, uint256 index) internal pure returns (bool) {\\n        return address(imd.rateProviders[index]) != address(0);\\n    }\\n\\n    function _isTokenExemptFromYieldProtocolFee(ImmutableData memory imd, uint256 index) internal pure returns (bool) {\\n        return imd.isExemptFromYieldProtocolFee[index];\\n    }\\n}\\n\",\"keccak256\":\"0xa028641ba58aff5c996706da91b28b423afffdf0edf7400ad2c64c9984ddb3e6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063626117301461003b5780636669506014610060575b600080fd5b61004e610049366004611fe4565b610073565b60405190815260200160405180910390f35b61004e61006e366004611fe4565b610096565b600061008c6001878787610086886100a5565b876100d6565b9695505050505050565b600061008c6000878787610086885b6100d260405180608001604052806060815260200160608152602001606081526020016000151581525090565b5090565b6000806100e68460000151610117565b90506000806100f589846101cf565b915091506101098a8a8a8a8a87878c61025f565b9a9950505050505050505050565b6060600082516001600160401b0381111561013457610134611d41565b60405190808252806020026020018201604052801561015d578160200160208202803683370190505b50905060005b83518110156101c85761018e84828151811061018157610181612076565b60200260200101516102c5565b8282815181106101a0576101a0612076565b6001600160a01b03909216602092830291909101909101526101c1816120a2565b9050610163565b5092915050565b604051631f29a8cd60e31b8152600481018390526060906000908190819073ba12222222228d8ba445958a75a0704d566bf2c89063f94d466890602401600060405180830381865afa158015610229573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102519190810190612116565b909890975095505050505050565b600080896001811115610274576102746121e3565b0361029b5761029488888887876102896102f8565b8b6040015189610375565b90506102b9565b6102b688888887876102ab6102f8565b8b60400151896103d6565b90505b98975050505050505050565b60006001600160a01b038216156102dc57816102f2565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b92915050565b600073ce88686553686da562ce7cea497ce749da109f9f6001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037091906121f9565b905090565b6000808280602001905181019061038c91906122f0565b90506000610399826104b2565b905060006103a783836104bd565b90506103b38982610588565b6103c58c8c8c8c8c8c878d8b8b610604565b509c9b505050505050505050505050565b600080828060200190518101906103ed91906122f0565b90506000606060006103fe846104b2565b9050600061040c85836104bd565b90506104188b82610588565b61042a8e8e8e8e8e8e878f8d8b61062a565b9094509250610439838261063d565b60005b83518110156104a057600084828151811061045957610459612076565b6020026020010151111561048e5783818151811061047957610479612076565b602002602001015196505050505050506102b9565b80610498816120a2565b91505061043c565b50505050505098975050505050505050565b60606102f2826106b3565b606060008361010001516001600160401b038111156104de576104de611d41565b604051908082528060200260200182016040528015610507578160200160208202803683370190505b50905060005b846101000151811015610580576105536105278583610768565b8660400151838151811061053d5761053d612076565b60200260200101516107c390919063ffffffff16565b82828151811061056557610565612076565b6020908102919091010152610579816120a2565b905061050d565b509392505050565b815160005b818110156105fe576105d18482815181106105aa576105aa612076565b60200260200101518483815181106105c4576105c4612076565b60200260200101516107c3565b8482815181106105e3576105e3612076565b60209081029190910101526105f7816120a2565b905061058d565b50505050565b6000606061061760018a888888886107e2565b915091509a509a98505050505050505050565b6000606061061760008a888888886107e2565b815160005b818110156105fe5761068684828151811061065f5761065f612076565b602002602001015184838151811061067957610679612076565b602002602001015161084b565b84828151811061069857610698612076565b60209081029190910101526106ac816120a2565b9050610642565b60608161010001516001600160401b038111156106d2576106d2611d41565b60405190808252806020026020018201604052801561071757816020015b60408051808201909152600080825260208201528152602001906001900390816106f05790505b50905060005b8261010001518110156107625761073481846108ae565b82828151811061074657610746612076565b60200260200101819052508061075b906120a2565b905061071d565b50919050565b600082828151811061077c5761077c612076565b6020026020010151600001516000146107b2578282815181106107a1576107a1612076565b6020026020010151600001516107bc565b670de0b6b3a76400005b9392505050565b6000670de0b6b3a76400006107d88385612413565b6107bc9190612440565b600060606000806000806107f78b8989610a1c565b9350935093509350611d1f8c61080f57610b44610813565b610b665b9050610828848487858f8f8f8863ffffffff16565b90975095506108398660008b610b79565b95505050505050965096945050505050565b6000816000036108765760405162461bcd60e51b815260040161086d90612462565b60405180910390fd5b82600003610886575060006102f2565b600061089a670de0b6b3a764000085612413565b90506108a68382612440565b9150506102f2565b60408051808201909152600080825260208201528160e001518314806108db57506108d98284610c4f565b155b6102f257600082608001516001600160a01b0316637f1260d18460000151868151811061090a5761090a612076565b60200260200101516040518263ffffffff1660e01b815260040161093d91906001600160a01b0391909116815260200190565b608060405180830381865afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190612489565b6020860192909252509083529050428110156101c857826020015184815181106109aa576109aa612076565b60200260200101516001600160a01b031663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1391906121f9565b82525092915050565b6000606060008060008087608001516001600160a01b0316633c975d516040518163ffffffff1660e01b81526004016040805180830381865afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b91906124bf565b915091506000806000610aa18c86868e8e610c8c565b92509250925060008b608001516001600160a01b0316636daccffa6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0f91906124e3565b505090506000868214610b2b57610b268285610ce3565b610b2d565b825b949e939d50909b5092995090975050505050505050565b60006060610b5687878a8c8888610e90565b9150915097509795505050505050565b60006060610b5687878a8c898989610f93565b606083516001610b89919061251c565b6001600160401b03811115610ba057610ba0611d41565b604051908082528060200260200182016040528015610bc9578160200160208202803683370190505b50905060005b8151811015610580578260e001518114610c1e57848360e001518210610bff57610bfa60018361252f565b610c01565b815b81518110610c1157610c11612076565b6020026020010151610c20565b835b828281518110610c3257610c32612076565b602090810291909101015280610c47816120a2565b915050610bcf565b6000806001600160a01b031683602001518381518110610c7157610c71612076565b60200260200101516001600160a01b03161415905092915050565b600060606000806000610c9f878b611043565b91509150600080610cb3838c8c8c8c611083565b915091506000610cc385846111fa565b9050610ccf818661251c565b9d939c50909a509198505050505050505050565b80516000908190815b81811015610d2a57610d20858281518110610d0957610d09612076565b60200260200101518461121890919063ffffffff16565b9250600101610cec565b5081600003610d3e576000925050506102f2565b600082868302825b60ff811015610e3d578260005b86811015610d9a57610d90610d688387611224565b610d8b8c8481518110610d7d57610d7d612076565b60200260200101518a611224565b61124d565b9150600101610d53565b50839450610df3610dd2610dcc610db1848a611224565b610dc6610dbe888d611224565b6103e861124d565b90611218565b86611224565b610d8b610de28960010185611224565b610dc6610dbe6103e889038a611224565b935084841115610e1b57600185850311610e1657839750505050505050506102f2565b610e34565b600184860311610e3457839750505050505050506102f2565b50600101610d46565b5060405162461bcd60e51b815260206004820152602160248201527f537461626c6520496e76617269616e7420646964206e6f7420636f6e766572676044820152606560f81b606482015260840161086d565b60006060600080610ea086611273565b91509150600087516001600160401b03811115610ebf57610ebf611d41565b604051908082528060200260200182016040528015610ee8578160200160208202803683370190505b509050610f658883858e8e8b608001516001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5991906121f9565b8f959493929190611295565b818381518110610f7757610f77612076565b6020908102919091010152919a91995090975050505050505050565b600060606000610fa2856113c9565b509050610fb881610fb386896113e1565b610588565b600061103288838d8d89608001516001600160a01b03166355c676286040518163ffffffff1660e01b8152600401602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102791906121f9565b8e94939291906114a7565b9b919a509098505050505050505050565b6000606061106e84848660e001518151811061106157611061612076565b602002602001015161178d565b61107885856113e1565b915091509250929050565b60008060008060006110978a8a89896117ff565b92509250925060008884116110ad5760006110b7565b6110b7898561252f565b905060008484116110c95760006110d3565b6110d3858561252f565b60808a0151604051633823200b60e11b8152600060048201819052929350611159916001600160a01b031690637046401690602401602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114991906121f9565b611153858761084b565b906107c3565b60808b0151604051633823200b60e11b8152600260048201529192506000916111da916001600160a01b031690637046401690602401602060405180830381865afa1580156111ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d091906121f9565b611153858861084b565b90506111e6818361251c565b9e949d50939b505050505050505050505050565b60006107bc61120883611882565b61121285856107c3565b9061084b565b60006107bc828461251c565b60008282028315806112445750828482816112415761124161242a565b04145b6107bc57600080fd5b60008160000361125c57600080fd5b81838161126b5761126b61242a565b049392505050565b6000808280602001905181019061128a9190612542565b909590945092505050565b6000806112b6846112b0876112aa818b6118a8565b906118b4565b9061191a565b905060006112c68a8a848b61194e565b905060006112f6828b8b815181106112e0576112e0612076565b60200260200101516118a890919063ffffffff16565b90506000805b8b5181101561133b576113318c828151811061131a5761131a612076565b60200260200101518361121890919063ffffffff16565b91506001016112fc565b50600061136a828d8d8151811061135457611354612076565b602002602001015161084b90919063ffffffff16565b9050600061137782611882565b90506000611385858361191a565b9050600061139386836118a8565b90506113b46113ad83670de0b6b3a76400008d90036107c3565b8290611218565b98505050505050505050979650505050505050565b606060008280602001905181019061128a919061257d565b60606000600183516113f3919061252f565b6001600160401b0381111561140a5761140a611d41565b604051908082528060200260200182016040528015611433578160200160208202803683370190505b50905060005b815181101561058057838560e00151821061145e5761145982600161251c565b611460565b815b8151811061147057611470612076565b602002602001015182828151811061148a5761148a612076565b60209081029190910101528061149f816120a2565b915050611439565b600080805b87518110156114d4576114ca88828151811061131a5761131a612076565b91506001016114ac565b50600086516001600160401b038111156114f0576114f0611d41565b604051908082528060200260200182016040528015611519578160200160208202803683370190505b5090506000805b89518110156115ee576000611541858c848151811061135457611354612076565b90506115a58b838151811061155857611558612076565b60200260200101516112128c858151811061157557611575612076565b60200260200101518e868151811061158f5761158f612076565b602002602001015161121890919063ffffffff16565b8483815181106115b7576115b7612076565b6020026020010181815250506115e36115dc8286858151811061053d5761053d612076565b8490611218565b925050600101611520565b50600089516001600160401b0381111561160a5761160a611d41565b604051908082528060200260200182016040528015611633578160200160208202803683370190505b50905060005b8a5181101561172b5760008385838151811061165757611657612076565b602002602001015111156116d257600061168e61167c86670de0b6b3a76400006118a8565b8e858151811061053d5761053d612076565b905060006116a8828e86815181106112e0576112e0612076565b90506116c96116c282670de0b6b3a76400008d90036107c3565b8390611218565b925050506116ef565b8a82815181106116e4576116e4612076565b602002602001015190505b611705818d848151811061158f5761158f612076565b83838151811061171757611717612076565b602090810291909101015250600101611639565b5060006117388c83610ce3565b90506000611746828a61084b565b9050670de0b6b3a764000081111561177a5761176d8a670de0b6b3a763ffff1983016107c3565b965050505050505061008c565b5060009c9b505050505050505050505050565b60006107bc8284608001516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906121f9565b906118a8565b600080600061181b6118148860018888611b75565b8790610ce3565b92508460a001511561183b576118318688610ce3565b9150819050611878565b8460c0015115611859578291506118528688610ce3565b9050611878565b6118696118148860008888611b75565b91506118758688610ce3565b90505b9450945094915050565b6000670de0b6b3a7640000821061189a5760006102f2565b50670de0b6b3a76400000390565b60006107bc828461252f565b6000816000036118d65760405162461bcd60e51b815260040161086d90612462565b826000036118e6575060006102f2565b60006118fa670de0b6b3a764000085612413565b905082600182038161190e5761190e61242a565b046001019150506102f2565b6000806119278385612413565b90508060000361193b5760009150506102f2565b670de0b6b3a7640000600019820161190e565b60008084518602905060008560008151811061196c5761196c612076565b60200260200101519050600086518760008151811061198d5761198d612076565b60200260200101510290506000600190505b87518110156119ff576119de6119d86119d1848b85815181106119c4576119c4612076565b6020026020010151611224565b8a51611224565b8861124d565b91506119f5888281518110610d0957610d09612076565b925060010161199f565b50868581518110611a1257611a12612076565b6020026020010151820391506000611a2a8788611224565b90506000611a61611a4f611a4784611a428988611224565b611ca6565b6103e8611224565b8a89815181106119c4576119c4612076565b90506000611a7c611a75611a478b8961124d565b8690611218565b9050600080611a98611a8e8686611218565b611a428d86611218565b905060005b60ff811015611b1857819250611acd611aba86610dc68586611224565b611a428e6117f988610dc6886002611224565b915082821115611af657600183830311611af157509750611b6d9650505050505050565b611b10565b600182840311611b1057509750611b6d9650505050505050565b600101611a9d565b5060405162461bcd60e51b815260206004820152602360248201527f537461626c65206765742062616c616e636520646964206e6f7420636f6e766560448201526272676560e81b606482015260840161086d565b949350505050565b83516060906000816001600160401b03811115611b9457611b94611d41565b604051908082528060200260200182016040528015611bbd578160200160208202803683370190505b50905060005b82811015611c9b5760008660e00151821015611bdf5781611bea565b611bea82600161251c565b9050611bf68782611ce2565b80611c0e5750878015611c0e5750611c0e8782610c4f565b611c3157888281518110611c2457611c24612076565b6020026020010151611c6d565b611c6d898381518110611c4657611c46612076565b6020026020010151878381518110611c6057611c60612076565b6020026020010151611d0a565b838381518110611c7f57611c7f612076565b602090810291909101015250611c94816120a2565b9050611bc3565b509695505050505050565b600081600003611cb557600080fd5b82600003611cc5575060006102f2565b816001840381611cd757611cd761242a565b0460010190506102f2565b600082606001518281518110611cfa57611cfa612076565b6020026020010151905092915050565b80516020820151600091906107d89085612413565b611d276125c9565b565b6001600160a01b0381168114611d3e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715611d7957611d79611d41565b60405290565b60405161012081016001600160401b0381118282101715611d7957611d79611d41565b604051601f8201601f191681016001600160401b0381118282101715611dca57611dca611d41565b604052919050565b60006001600160401b03821115611deb57611deb611d41565b5060051b60200190565b600082601f830112611e0657600080fd5b81356020611e1b611e1683611dd2565b611da2565b82815260059290921b84018101918181019086841115611e3a57600080fd5b8286015b84811015611c9b5780358352918301918301611e3e565b600082601f830112611e6657600080fd5b81356001600160401b03811115611e7f57611e7f611d41565b611e92601f8201601f1916602001611da2565b818152846020838601011115611ea757600080fd5b816020850160208301376000918101602001919091529392505050565b8015158114611d3e57600080fd5b8035611edd81611ec4565b919050565b600060808284031215611ef457600080fd5b611efc611d57565b905081356001600160401b0380821115611f1557600080fd5b818401915084601f830112611f2957600080fd5b81356020611f39611e1683611dd2565b82815260059290921b84018101918181019088841115611f5857600080fd5b948201945b83861015611f7f578535611f7081611d29565b82529482019490820190611f5d565b86525085810135935082841115611f9557600080fd5b611fa187858801611df5565b90850152506040840135915080821115611fba57600080fd5b50611fc784828501611e55565b604083015250611fd960608301611ed2565b606082015292915050565b600080600080600060a08688031215611ffc57600080fd5b85359450602086013561200e81611d29565b9350604086013561201e81611d29565b925060608601356001600160401b038082111561203a57600080fd5b61204689838a01611ee2565b9350608088013591508082111561205c57600080fd5b5061206988828901611e55565b9150509295509295909350565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016120b4576120b461208c565b5060010190565b600082601f8301126120cc57600080fd5b815160206120dc611e1683611dd2565b82815260059290921b840181019181810190868411156120fb57600080fd5b8286015b84811015611c9b57805183529183019183016120ff565b60008060006060848603121561212b57600080fd5b83516001600160401b038082111561214257600080fd5b818601915086601f83011261215657600080fd5b81516020612166611e1683611dd2565b82815260059290921b8401810191818101908a84111561218557600080fd5b948201945b838610156121ac57855161219d81611d29565b8252948201949082019061218a565b918901519197509093505050808211156121c557600080fd5b506121d2868287016120bb565b925050604084015190509250925092565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561220b57600080fd5b5051919050565b8051611edd81611d29565b600082601f83011261222e57600080fd5b8151602061223e611e1683611dd2565b82815260059290921b8401810191818101908684111561225d57600080fd5b8286015b84811015611c9b57805161227481611d29565b8352918301918301612261565b8051611edd81611ec4565b600082601f83011261229d57600080fd5b815160206122ad611e1683611dd2565b82815260059290921b840181019181810190868411156122cc57600080fd5b8286015b84811015611c9b5780516122e381611ec4565b83529183019183016122d0565b60006020828403121561230257600080fd5b81516001600160401b038082111561231957600080fd5b90830190610120828603121561232e57600080fd5b612336611d7f565b82518281111561234557600080fd5b6123518782860161221d565b82525060208301518281111561236657600080fd5b6123728782860161221d565b60208301525060408301518281111561238a57600080fd5b612396878286016120bb565b6040830152506060830151828111156123ae57600080fd5b6123ba8782860161228c565b6060830152506123cc60808401612212565b60808201526123dd60a08401612281565b60a08201526123ee60c08401612281565b60c082015260e083810151908201526101009283015192810192909252509392505050565b80820281158282048414176102f2576102f261208c565b634e487b7160e01b600052601260045260246000fd5b60008261245d57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600d908201526c2d32b937903234bb34b9b4b7b760991b604082015260600190565b6000806000806080858703121561249f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b600080604083850312156124d257600080fd5b505080516020909101519092909150565b6000806000606084860312156124f857600080fd5b83519250602084015161250a81611ec4565b80925050604084015190509250925092565b808201808211156102f2576102f261208c565b818103818111156102f2576102f261208c565b60008060006060848603121561255757600080fd5b83516002811061256657600080fd5b602085015160409095015190969495509392505050565b60008060006060848603121561259257600080fd5b8351600381106125a157600080fd5b60208501519093506001600160401b038111156125bd57600080fd5b6121d2868287016120bb565b634e487b7160e01b600052605160045260246000fdfea2646970667358221220aaeace29dfa23275a4dfac9f7064939108c975c877373c67dc7b12a93a13e77d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "from https://github.com/pendle-finance/pendle-core-v2-public/blob/e0b8164f8837df85dd1f9cf2f5d9752c8fc5f704/contracts/core/StandardizedYield/implementations/BalancerStable/base/ComposableStable/ComposableStablePreview.sol",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}